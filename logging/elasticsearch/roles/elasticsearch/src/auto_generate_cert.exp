#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Thu Dec 15 08:26:13 2022
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn $env(SHELL)
match_max 100000
send -- "/usr/share/elasticsearch/bin/elasticsearch-certutil -s cert --ca /tmp/elastic_ca --pem --in /tmp/generate_certificates.yml --out /tmp/certificates.zip"
expect -exact "/usr/share/elasticsearch/bin/elasticsearch-certutil -s cert --ca /tmp/elastic_ca --pem --in /tmp/generate_certificates.yml --out /tmp/certificates.zip"
send -- "\r"
expect -exact "\r
This tool assists you in the generation of X.509 certificates and certificate\r
signing requests for use with SSL/TLS in the Elastic stack.\r
\r
The 'cert' mode generates X.509 certificate and private keys.\r
    * By default, this generates a single certificate and key for use\r
       on a single instance.\r
    * The '-multiple' option will prompt you to enter details for multiple\r
       instances and will generate a certificate and key for each one\r
    * The '-in' option allows for the certificate generation to be automated by describing\r
       the details of each instance in a YAML file\r
\r
    * An instance is any piece of the Elastic Stack that requires an SSL certificate.\r
      Depending on your configuration, Elasticsearch, Logstash, Kibana, and Beats\r
      may all require a certificate and private key.\r
    * The minimum required value for each instance is a name. This can simply be the\r
      hostname, which will be used as the Common Name of the certificate. A full\r
      distinguished name may also be used.\r
    * A filename value may be required for each instance. This is necessary when the\r
      name would result in an invalid file or directory name. The name provided here\r
      is used as the directory name (within the zip) and the prefix for the key and\r
      certificate files. The filename is required if you are prompted and the name\r
      is not displayed in the prompt.\r
    * IP addresses and DNS names are optional. Multiple values can be specified as a\r
      comma separated string. If no IP addresses or DNS names are provided, you may\r
      disable hostname verification in your SSL configuration.\r
\r
\r
    * All certificates generated by this tool will be signed by a certificate authority (CA)\r
      unless the --self-signed command line option is specified.\r
      The tool can automatically generate a new CA for you, or you can provide your own with\r
      the --ca or --ca-cert command line options.\r
\r
\r
By default the 'cert' mode produces a single PKCS#12 output file which holds:\r
    * The instance certificate\r
    * The private key for the instance certificate\r
    * The CA certificate\r
\r
If you specify any of the following options:\r
    * -pem (PEM formatted output)\r
    * -multiple (generate multiple certificates)\r
    * -in (generate certificates from an input file)\r
then the output will be be a zip file containing individual certificate/key files\r
\r
Enter password for CA (/tmp/elastic_ca) : "
send -- "\r"
expect -exact "\r
\r
Certificates written to /tmp/certificates.zip\r
\r
This file should be properly secured as it contains the private key for \r
your instance.\r
After unzipping the file, there will be a directory for each instance.\r
Each instance has a certificate and private key.\r
For each Elastic product that you wish to configure, you should copy\r
the certificate, key, and CA certificate to the relevant configuration directory\r
and then follow the SSL configuration instructions in the product guide.\r
\r
For client applications, you may only need to copy the CA certificate and\r
configure the client to trust this certificate.\r"
send -- "exit\r"
expect eof
